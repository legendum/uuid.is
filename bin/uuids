#!/usr/bin/env node

var USAGE = [
  'usage: uuids <cmd> --port=80',
  '',
  '...where <cmd> is a command from:',
  'start:    Start the UUIDs server on the specified port',
  'archive:  Save a file to the archive (requires <file> arg)',
  'restore:  Restore a file from the archive (use <file> arg)',
  'suspend:  Suspend a share\'s account (use <share> arg)',
  'activate: Activate a share\'s account (use <share> arg)',
  'invite:   Create an invitation code for a new account',
  'keygen:   Generate a public/private keypair for UUIDs',
  'quota:    Create a new quota for an account to claim',
  'test:     Run all the tests',
  'usage:    Display this message',
  ''
].join("\n");

var argv = require('yargs').argv
  , path = require('path')
  , exec = require('child_process').exec
  , asyncblock = require('asyncblock')
  , env = require('../server/lib/env')(process.env.UUIDS_ENV || 'production')
  , archive = require('../server/lib/archive')
  , invites = require('../server/lib/invites')
  , quotas = require('../server/lib/quotas')
  , shares = require('../server/lib/shares')
  , utils = require('../server/lib/utils')
  , File = require('../server/lib/file');

var UUIDS = (function(cmd) {

  function usage() {
    utils.quit(USAGE);
  }

  function system(cmd) {
    asyncblock(function(flow){
      var result;
      exec(cmd, flow.add());
      result = flow.wait();
      console.log(result); 
    });
  }

  function archiveFile() {
    var filename = argv._[1]
      , filepath = (filename ? path.join(process.cwd(), filename) : null);
    if (!archive.active()) utils.quit("sorry, archive is not active");
    if (filename && utils.exists(filepath)) {
      archive.save(filepath, function(err) {
        if (err) utils.quit(err);
        utils.unlink(filepath);
        utils.quit("archived %s", filepath);
      });
    } else {
      utils.quit("usage: uuids archive <file>");
    }
  }

  function restoreFile() {
    var filename = argv._[1]
      , filepath = (filename ? path.join(process.cwd(), filename) : null);
    if (!archive.active()) utils.quit("sorry, archive is not active");
    if (filename) {
      archive.restore(filepath, function(err) {
        if (err) utils.quit(err);
        utils.quit("restored %s", filepath);
      });
    } else {
      utils.quit("usage: uuids restore <file>");
    }
  }

  function setUsageState(uuidSharedPart, state) {
    var uuid = shares.access(uuidSharedPart)
    if (!uuid) return false;
    new File(uuid, function(err, file) {
      if (err && !err.message.match(/suspended/)) utils.quit(err);
      file.usageObject().state(state);
      utils.quit("account owning share %s is now %s", uuidSharedPart, state);
    });
    return true;
  }

  function suspendAccount() {
    if (!setUsageState(argv._[1], 'suspended')) {
      utils.quit("usage: uuids suspend <share>");
    }
  }

  function activateAccount() {
    if (!setUsageState(argv._[1], 'active')) {
      utils.quit("usage: uuids activate <share>");
    }
  }

  function invite() {
    utils.quit(invites.create(utils.uuid()));
  }

  function keygen() {
    process.chdir(path.join(__dirname, '../keys'));
    system('openssl genrsa -out uuids.pem 2048 && openssl rsa -in uuids.pem -pubout > uuids.pub');
    utils.quit("keys generated");
  }

  function quota() {
    var gb = parseInt(argv._[1]);
    if (gb > 0) {
      utils.quit(quotas.create('' + (gb * 1000000000)));
    } else {
      utils.quit("usage: uuids quota <gb>");
    }
  }

  function test() {
    system('mocha ' + path.join(__dirname, '/../test/server'));
  }

  function start() {
    require(path.join(__dirname, '/../server/uuids'));
  }

  var commands = {
    help: usage
  , archive: archiveFile
  , restore: restoreFile
  , suspend: suspendAccount
  , activate: activateAccount
  , invite: invite
  , keygen: keygen
  , quota: quota
  , start: start
  , test: test
  , usage: usage
  };
  try {
    commands[cmd]();
  } catch(e) {
    usage();
  }
})(argv._[0]);
